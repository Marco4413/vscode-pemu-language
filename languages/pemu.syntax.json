{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "PEMU",
	"patterns": [
		{
			"include": "#docs"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#labels"
		},
		{
			"include": "#integers"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#characters"
		},
		{
			"include": "#compiler_variables"
		},
		{
			"include": "#compiler_instructions"
		},
		{
			"include": "#arrays"
		},
		{
			"include": "#offsets"
		},
		{
			"include": "#instructions"
		},
		{
			"include": "#registers"
		},
		{
			"include": "#math_expressions"
		},
		{
			"include": "#identifier"
		}
	],
	"repository": {
		"docs": {
			"name": "comment.block.documentation",
			"begin": "^\\s*;;",
			"while": "^\\s*;",
			"patterns": [
				{
					"match": "(@)([\\w\\-]+)\\s*(?:(\\{)([^{}]+)?(\\}))?\\s*(?:(\\:)(.+))?",
					"captures": {
						"1": {
							"name": "punctuation.definition.block.tag"
						},
						"2": {
							"name": "storage.type.class"
						},
						"3": {
							"name": "punctuation.definition.bracket.curly.begin"
						},
						"4": {
							"patterns": [
								{
									"name": "punctuation.separator.comma",
									"match": ","
								},
								{
									"name": "punctuation.separator",
									"match": "\\|"
								},
								{
									"name": "punctuation.separator",
									"match": "&"
								},
								{
									"name": "entity.name.type.instance",
									"match": "[\\w\\-]+"
								}
							]
						},
						"5": {
							"name": "punctuation.definition.bracket.curly.end"
						},
						"6": {
							"name": "punctuation.definition.block.tag"
						},
						"7": {
							"name": "string"
						}
					}
				}
			]
		},
		"comments": {
			"name": "comment.line",
			"match": ";[^\\v]*\\v?"
		},
		"labels": {
			"name": "keyword.operator.assignment",
			"match": ":"
		},
		"integers": {
			"name": "constant.numeric",
			"patterns": [
				{
					"name": "constant.numeric.hex",
					"match": "\\b0x[0-9a-fA-F]+(?:_*[0-9a-fA-F]+)*\\b"
				},
				{
					"name": "constant.numeric.octal",
					"match": "\\b0o[0-7]+(?:_*[0-7]+)*\\b"
				},
				{
					"name": "constant.numeric.binary",
					"match": "\\b0b[01]+(?:_*[01]+)*\\b"
				},
				{
					"name": "constant.numeric.decimal",
					"match": "([+\\-]?)[0-9]+(?:_*[0-9]+)*\\b",
					"captures": {
						"1": {
							"name": "keyword.operator.decrement"
						}
					}
				}
			]
		},
		"float": {
			"name": "constant.numeric.decimal",
			"match": "\\b[0-9]*(\\.)[0-9]+\\b",
			"captures": {
				"1": {
					"name": "meta.delimiter.decimal.period"
				}
			}
		},
		"numbers": {
			"patterns": [
				{
					"include": "#integers"
				},
				{
					"include": "#float"
				}
			]
		},
		"strings": {
			"comment": "Matches all strings with double quotes",
			"name": "string.quoted.double",
			"match": "(\")((?:[^\\\\\"]|(?:\\\\[0-9]+;?|\\\\.))*)(\")",
			"captures": {
				"1": {
					"name": "punctuation.definition.string.begin"
				},
				"2": {
					"patterns": [
						{
							"include": "#character_escapes"
						}
					]
				},
				"3": {
					"name": "punctuation.definition.string.end"
				}
			}
		},
		"characters": {
			"name": "string.quoted.single",
			"match": "'(\\\\.|\\\\[0-9]+;?|[^\\\\])'",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#character_escapes"
						}
					]
				}
			}
		},
		"character_escapes": {
			"name": "constant.character.escape",
			"match": "\\\\[0-9]+;?|\\\\."
		},
		"compiler_variables": {
			"name": "support.class",
			"match": "@\\w+"
		},
		"compiler_instructions": {
			"name": "keyword.control",
			"match": "#(DW|DS|DA|INCLUDE)\\s"
		},
		"arrays": {
			"name": "meta.array.literal",
			"begin": "\\{",
			"end": "\\}",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.bracket.curly.begin"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.bracket.curly.end"
				}
			},
			"patterns": [
				{
					"include": "#docs"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#integers"
				},
				{
					"include": "#registers"
				},
				{
					"include": "#characters"
				},
				{
					"include": "#offsets"
				},
				{
					"include": "#compiler_variables"
				},
				{
					"include": "#labels"
				},
				{
					"include": "#identifier"
				}
			]
		},
		"offsets": {
			"begin": "(\\[)",
			"end": "(\\])",
			"captures": {
				"0": {
					"name": "meta.block"
				},
				"1": {
					"name": "meta.brace.square"
				}
			},
			"patterns": [
				{
					"include": "#integers"
				},
				{
					"include": "#characters"
				},
				{
					"include": "#compiler_variables"
				}
			]
		},
		"instructions": {
			"name": "entity.name.function",
			"match": "\\b(?:NULL|BRK|DATA|XMOV|MOV|SWP|OUTI|OUTC|GETI|GETC|GETK|TS|TMS|INC|DEC|ADD|SUB|MUL|DIV|MOD|AND|OR|NOT|XOR|SHL|SHR|ROL|ROR|CMP|JMP|JC|JNC|JZ|JNZ|JE|JNE|JB|JNB|JBE|JNBE|JA|JNA|JAE|JNAE|CALL|RET|PUSH|PUSHD|POP|LOOP|HLT)\\b"
		},
		"registers": {
			"name": "keyword",
			"patterns": [
				{
					"name": "keyword.register",
					"match": "\\b(?:SP|IP)\\b"
				},
				{
					"name": "keyword.flag",
					"match": "\\b(ZF|CF)\\b"
				}
			]
		},
		"math_mono_operators_symbols": {
			"name": "keyword.operator.arithmetic",
			"match": "[+\\-*/%~]"
		},
		"math_mono_operators_ids": {
			"name": "entity.name.function",
			"match": "(?:abs|sqrt|log2|log)"
		},
		"math_bi_operators_symbols": {
			"name": "keyword.operator.arithmetic",
			"match": "(?:<<|>>|\\||&|\\^)"
		},
		"math_bi_operators_ids": {
			"name": "entity.name.function",
			"match": "(?:pow)"
		},
		"math_scope": {
			"begin": "(\\()",
			"end": "(\\))",
			"captures": {
				"0": {
					"name": "meta.block"
				},
				"1": {
					"name": "meta.brace.round"
				}
			},
			"patterns": [
				{
					"include": "#math_literals"
				}
			]
		},
		"math_literals": {
			"patterns": [
				{
					"include": "#numbers"
				},
				{
					"include": "#math_scope"
				},
				{
					"include": "#math_mono_operators_symbols"
				},
				{
					"include": "#math_mono_operators_ids"
				},
				{
					"include": "#math_bi_operators_symbols"
				},
				{
					"include": "#math_bi_operators_ids"
				},
				{
					"include": "#compiler_variables"
				}
			]
		},
		"math_expressions": {
			"begin": "%(\\{)",
			"end": "(\\})",
			"captures": {
				"0": {
					"name": "meta.block"
				},
				"1": {
					"name": "meta.brace.curly"
				}
			},
			"patterns": [
				{
					"include": "#math_literals"
				}
			]
		},
		"identifier": {
			"name": "meta.var",
			"match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b"
		}
	},
	"scopeName": "source.pemu"
}